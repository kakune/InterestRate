/**
 * @file core.hpp
 * @brief This defines classes to calculate short rate paths.
 * @author kakune
 * @date 1/29/2024
 */

#ifndef SHORT_RATE_ONE_FACTOR_CORE_HPP
#define SHORT_RATE_ONE_FACTOR_CORE_HPP

#include <memory>
#include <vector>

#include "math/interpolate_1d.hpp"
#include "process/market_data.hpp"
#include "process/random.hpp"
#include "short_rate/model_data.hpp"

namespace ShortRate
{
namespace OneFactor
{

/**
 * @brief This is the abstract class for short rate models.
 */
class ModelAbstract
{
protected:
    const std::size_t mNPath;                 //! the number of Path
    const Process::MarketData::Terms mTerms;  //! term structure
    const double mInitSpotRate;               //! initial spot rate
    /**
     * @brief The coefficient of dt in SDE of r[inIndPath][inIndTerm]
     * @param inIndPath the index of path
     * @param inIndTerm the index of term
     * @return double the coefficient
     */
    virtual double driftCoeff(
        std::size_t inIndPath, std::size_t inIndTerm,
        const std::vector<std::vector<double>>& inSpots ) const = 0;

public:
    /**
     * @brief This constructs a ModelAbstract.
     * @param inNPath the number of Path
     * @param insTerms term structure
     */
    ModelAbstract( std::size_t inNPath,
                   const Process::MarketData::Terms& inTerms,
                   double inInitSpotRate ) :
        mNPath( inNPath ), mTerms( inTerms ), mInitSpotRate( inInitSpotRate )
    {
    }
    virtual ~ModelAbstract() = default;
    /**
     * @brief This calcurate spot rates and Disconunt Factors.
     */
    virtual ShortRate::SpotRates createSpotRates() const;
};

/**
 * @brief This build the object of ModelAbstract.
 */
class ModelAbstractBuilder
{
protected:
    double mInitSpotRate;
    std::size_t mNPath;                                   //! the number of Path
    std::unique_ptr<Process::MarketData::Terms> muTerms;  //! term structure

public:
    ModelAbstractBuilder& setNPath( std::size_t inNPath )
    {
        mNPath = inNPath;
        return *this;
    }
    ModelAbstractBuilder& setTerms(
        std::shared_ptr<const std::vector<double>> insTerms )
    {
        muTerms = std::make_unique<Process::MarketData::Terms>( insTerms );
        return *this;
    }
    ModelAbstractBuilder& setTerms( const Process::MarketData::Terms& inTerms )
    {
        muTerms = std::make_unique<Process::MarketData::Terms>( inTerms );
        return *this;
    }
    ModelAbstractBuilder& setInitSpotRate( double inInitSpotRate )
    {
        mInitSpotRate = inInitSpotRate;
        return *this;
    }
    virtual ~ModelAbstractBuilder() = default;
};

/**
 * @brief This is (test) class of constant short-rate model.
 */
class ConstantRate : public ModelAbstract
{
private:
    double driftCoeff(
        std::size_t inIndPath, std::size_t inIndTerm,
        const std::vector<std::vector<double>>& inSpots ) const override;

public:
    ConstantRate( const Process::MarketData::Terms& inTerms,
                  double inInitSpotRate ) :
        ModelAbstract( 1, inTerms, inInitSpotRate )
    {
    }
};

/**
 * @brief This is abstract class for short-rate models generated by
 * one-dimensional Brownian motion.
 */
class OneFactorAbstract : public ModelAbstract
{
protected:
    std::unique_ptr<Process::Random::StdBrownAbstract>
        muStdBrown;  //! random path
    /**
     * @brief The coefficient of dW in SDE of r[inIndPath][inIndTerm]
     * @param inIndPath the index of path
     * @param inIndTerm the index of term
     * @return double the coefficient
     */
    virtual double volCoeff(
        std::size_t inIndPath, std::size_t inIndTerm,
        const std::vector<std::vector<double>>& inSpots ) const = 0;

public:
    OneFactorAbstract(
        std::size_t inNPath, const Process::MarketData::Terms& inTerms,
        double inInitSpotRate,
        std::unique_ptr<Process::Random::StdBrownAbstract> inuStdBrown ) :
        ModelAbstract( inNPath, inTerms, inInitSpotRate ),
        muStdBrown( std::move( inuStdBrown ) )
    {
    }
    virtual ShortRate::SpotRates createSpotRates() const override;
};

class OneFactorAbstractBuilder : public ModelAbstractBuilder
{
protected:
    std::unique_ptr<Process::Random::StdBrownAbstract>
        muStdBrown;  //! random path
public:
    OneFactorAbstractBuilder& setRandom(
        std::unique_ptr<Process::Random::StdBrownAbstract> inuStdBrown )
    {
        muStdBrown = std::move( inuStdBrown );
        return *this;
    }
};

}  // namespace OneFactor
}  // namespace ShortRate

#endif