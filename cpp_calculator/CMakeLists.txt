cmake_minimum_required(VERSION 3.18)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
option(USE_CLANG "Build with Clang instead of the default compiler" OFF)
if(USE_CLANG)
  set(CMAKE_C_COMPILER "clang" CACHE STRING "clang compiler" FORCE)
  set(CMAKE_CXX_COMPILER "clang++" CACHE STRING "clang++ compiler" FORCE)
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
  set(CMAKE_CXX_FLAGS "$ENV{CXX_FLAGS} -Wall -Wextra -Wno-unknown-pragmas -Wno-unused -Wno-unused-parameter -Wno-sign-compare -DNINCLUDE_TPP")
else()
  set(CMAKE_CXX_FLAGS "$ENV{CXX_FLAGS} -Wall")
  set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXX_FLAGS_DEBUG} -g -O0")
  set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXX_FLAGS_RELEASE} -O3 -DNDEBUG -Wno-all")
endif()


if(CUDA_ENABLED)
    project(InterestRate LANGUAGES CXX CUDA)
    set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)
    set(CMAKE_CUDA_ARCHITECTURES "86")
    set(CMAKE_CUDA_STANDARD 20)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)
    set(CMAKE_CUDA_FLAGS_DEBUG "-G")
    set(CMAKE_CUDA_FLAGS_RELEASE "-O3")
    add_definitions(-DUSE_CUDA)
    find_package(CUDAToolkit REQUIRED)
else()
    project(InterestRate LANGUAGES CXX)
endif()

find_package(MKL QUIET)
if(MKL_FOUND)
  find_package(OpenMP REQUIRED)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
else()
  add_definitions(-DNUSE_MKL)
  find_package(LAPACK REQUIRED)
endif()

add_subdirectory(src)

enable_testing()
add_subdirectory(test)


